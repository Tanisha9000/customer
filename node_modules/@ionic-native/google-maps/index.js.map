{"version":3,"sources":["../../../src/@ionic-native/plugins/google-maps/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, CordovaInstance, Plugin, InstanceProperty, InstanceCheck, checkAvailability, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/fromEvent';\r\n\r\n\r\nexport type MapType = 'MAP_TYPE_NORMAL' | 'MAP_TYPE_ROADMAP' | 'MAP_TYPE_SATELLITE' | 'MAP_TYPE_HYBRID' | 'MAP_TYPE_TERRAIN' | 'MAP_TYPE_NONE';\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class LatLng implements ILatLng {\r\n\r\n  lat: number;\r\n  lng: number;\r\n\r\n  constructor(lat: number, lng: number) {\r\n    this.lat = lat;\r\n    this.lng = lng;\r\n  }\r\n\r\n  equals(other: ILatLng): boolean {\r\n    return this.lat === other.lat && this.lng === other.lng;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.lat + ',' + this.lng;\r\n  }\r\n\r\n  toUrlValue(precision?: number): string {\r\n    precision = precision || 6;\r\n\r\n    return this.lat.toFixed(precision) + ',' + this.lng.toFixed(precision);\r\n  }\r\n}\r\n\r\nexport interface ILatLngBounds {\r\n  northeast: ILatLng;\r\n  southwest: ILatLng;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class LatLngBounds implements ILatLngBounds {\r\n\r\n  private _objectInstance: any;\r\n\r\n  @InstanceProperty northeast: ILatLng;\r\n  @InstanceProperty southwest: ILatLng;\r\n  @InstanceProperty type: string;\r\n\r\n  constructor(points?: ILatLng[]) {\r\n    this._objectInstance = new (GoogleMaps.getPlugin()).LatLngBounds(points);\r\n  }\r\n\r\n  /**\r\n   * Converts to string\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  toString(): string { return; }\r\n\r\n  /**\r\n   * Returns a string of the form \"lat_sw,lng_sw,lat_ne,lng_ne\" for this bounds, where \"sw\" corresponds to the southwest corner of the bounding box, while \"ne\" corresponds to the northeast corner of that box.\r\n   * @param precision {number}\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  toUrlValue(precision?: number): string { return; }\r\n\r\n  /**\r\n   * Extends this bounds to contain the given point.\r\n   * @param LatLng {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  extend(LatLng: ILatLng): void {}\r\n\r\n  /**\r\n   * Returns true if the given lat/lng is in this bounds.\r\n   * @param LatLng {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  contains(LatLng: ILatLng): boolean { return; }\r\n\r\n  /**\r\n   * Computes the center of this LatLngBounds\r\n   * @return {LatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCenter(): LatLng { return; }\r\n}\r\n\r\nexport interface GoogleMapOptions {\r\n\r\n  mapType?: MapType;\r\n\r\n  controls?: {\r\n\r\n    /**\r\n     * Turns the compass on or off.\r\n     */\r\n    compass?: boolean;\r\n\r\n    /**\r\n     * Turns the myLocation picker on or off. If turns on this button, the application displays a permission dialog to obtain the geolocation data.\r\n     */\r\n    myLocationButton?: boolean;\r\n\r\n    /**\r\n     * Turns the indoor picker on or off.\r\n     */\r\n    indoorPicker?: boolean;\r\n\r\n    /**\r\n     * Turns the map toolbar on or off. This option is for Android only.\r\n     */\r\n    mapToolbar?: boolean;\r\n  };\r\n\r\n  gestures?: {\r\n    scroll?: boolean;\r\n    tilt?: boolean;\r\n    zoom?: boolean;\r\n    rotate?: boolean;\r\n  };\r\n\r\n  /**\r\n   * Map styles\r\n   * @ref https://developers.google.com/maps/documentation/javascript/style-reference\r\n   */\r\n  styles?: any[];\r\n\r\n  /**\r\n   * Initial camera position\r\n   */\r\n  camera?: CameraPosition<any>;\r\n\r\n  preferences?: {\r\n\r\n    /**\r\n     * Minimum and maximum zoom levels for zooming gestures.\r\n     */\r\n    zoom?: {\r\n      minZoom?: number;\r\n      maxZoom?: number;\r\n    };\r\n\r\n    /**\r\n     * Paddings of controls.\r\n     */\r\n    padding?: {\r\n      left?: number;\r\n      top?: number;\r\n      bottom?: number;\r\n      right?: number;\r\n    };\r\n\r\n    /**\r\n     * Turns the 3D buildings layer on or off.\r\n     */\r\n    building?: boolean\r\n  };\r\n}\r\n\r\nexport interface CameraPosition<T> {\r\n  /**\r\n   * The center location of the camera view.\r\n   */\r\n  target?: T;\r\n  /**\r\n   * View angle\r\n   */\r\n  tilt?: number;\r\n  /**\r\n   * Zoom level\r\n   */\r\n  zoom?: number;\r\n  /**\r\n   * Map orientation\r\n   */\r\n  bearing?: number;\r\n  /**\r\n   * The duration of animation in milliseconds\r\n   */\r\n  duration?: number;\r\n  /**\r\n   * Camera padding in pixel\r\n   */\r\n  padding?: number;\r\n}\r\n\r\nexport interface CircleOptions {\r\n  center?: ILatLng;\r\n  radius?: number;\r\n  strokeColor?: string;\r\n  strokeWidth?: number;\r\n  fillColor?: string;\r\n  clickable?: boolean;\r\n  visible?: boolean;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface GeocoderRequest {\r\n  address?: string | string[];\r\n  position?: ILatLng | ILatLng[];\r\n}\r\n\r\nexport interface GeocoderResult {\r\n  adminArea?: string;\r\n  country?: string;\r\n  countryCode?: string;\r\n  extra?: {\r\n    featureName?: string;\r\n    lines?: Array<string>;\r\n    permises?: string;\r\n    phone?: string;\r\n    url?: string\r\n  };\r\n  locale?: string;\r\n  locality?: string;\r\n  position?: { lat: number; lng: number };\r\n  postalCode?: string;\r\n  subAdminArea?: string;\r\n  subLocality?: string;\r\n  subThoroughfare?: string;\r\n  thoroughfare?: string;\r\n}\r\n\r\nexport interface GroundOverlayOptions {\r\n  /**\r\n   * URL of overlay\r\n   */\r\n  url?: string;\r\n  /**\r\n   * Bounds, array of ILatLng\r\n   */\r\n  bounds?: Array<ILatLng>;\r\n  /**\r\n   * Set to false to ignore click event\r\n   */\r\n  clickable?: boolean;\r\n  /**\r\n   * Set to false to hide\r\n   */\r\n  visible?: boolean;\r\n  /**\r\n   * Opacity. From 0.0 to 1.0 .\r\n   */\r\n  opacity?: number;\r\n  /**\r\n   * Bearing\r\n   */\r\n  bearing?: number;\r\n  /**\r\n   * Z-index\r\n   */\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface ILatLng {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\nexport interface MarkerIcon {\r\n  url?: string;\r\n  size?: {\r\n    width?: number;\r\n    height?: number;\r\n  };\r\n}\r\n\r\nexport interface MarkerOptions {\r\n  /**\r\n   * The icon image url or properties. Also you can specify HTML Color values. Alternatively you can specify the image as Base64\r\n   */\r\n  icon?: any;\r\n\r\n  /**\r\n   * The content of the infoWindow.\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * The snippet of the infoWindow.\r\n   */\r\n  snippet?: string;\r\n\r\n  /**\r\n   * The position of the marker.\r\n   */\r\n  position?: ILatLng;\r\n\r\n  /**\r\n   * \tSpecify the anchor of the InfoWindow\r\n   */\r\n  infoWindowAnchor?: number[];\r\n\r\n  /**\r\n   * Set true if you want to enable to drag the marker. (Default: false) Important! Drag starts after long pressed on the marker.\r\n   */\r\n  draggable?: boolean;\r\n\r\n  /**\r\n   * \tSet true if you want to use a flat marker. (Default: false)\r\n   */\r\n  flat?: boolean;\r\n\r\n  /**\r\n   * \tSet rotation angle. (Default: 0)\r\n   */\r\n  rotation?: number;\r\n\r\n  /**\r\n   * Set false if you want to hide. (Default: true)\r\n   */\r\n  visible?: boolean;\r\n\r\n  /**\r\n   * Specify the options for title. This property work for normal InfoWindow.\r\n   */\r\n  styles?: any;\r\n\r\n  /**\r\n   * Which animation to play when marker is added to a map.\r\n   */\r\n  animation?: string;\r\n\r\n  /**\r\n   * Higher zIndex value overlays will be drawn on top of lower zIndex value tile layers and overlays.\r\n   */\r\n  zIndex?: number;\r\n\r\n  /**\r\n   * Set to true to disable auto panning when the marker is clicked.\r\n   */\r\n  disableAutoPan?: boolean;\r\n}\r\n\r\nexport interface MarkerClusterIcon {\r\n  min: number;\r\n  max: number;\r\n  url: string;\r\n  anchor: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n}\r\n\r\nexport interface MarkerClusterOptions {\r\n  maxZoomLevel?: number;\r\n  boundsDraw?: boolean;\r\n  markers: MarkerOptions[];\r\n  icons: MarkerClusterIcon[];\r\n}\r\n\r\nexport interface MyLocation {\r\n  latLng?: LatLng;\r\n  elapsedRealtimeNanos?: any;\r\n  time?: string;\r\n  accuracy?: any;\r\n  bearing?: number;\r\n  altitude?: any;\r\n  speed?: number;\r\n  provider?: any;\r\n  hashCode?: any;\r\n}\r\n\r\nexport interface MyLocationOptions {\r\n  enableHighAccuracy?: boolean;\r\n}\r\n\r\nexport interface PolygonOptions {\r\n  points?: Array<ILatLng>;\r\n  geodesic?: boolean;\r\n  strokeColor?: string;\r\n  strokeWidth?: number;\r\n  fillColor?: string;\r\n  visible?: boolean;\r\n  zIndex?: number;\r\n  addHole?: Array<Array<LatLng>>;\r\n}\r\n\r\nexport interface PolylineOptions {\r\n  points?: Array<ILatLng>;\r\n  visible?: boolean;\r\n  geodesic?: boolean;\r\n  color?: string;\r\n  width?: number;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface TileOverlayOptions {\r\n  getTile: (x: number, y: number, zoom: number) => string;\r\n  visible?: boolean;\r\n  zIndex?: number;\r\n  tileSize?: number;\r\n  opacity?: number;\r\n  debug?: boolean;\r\n}\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class VisibleRegion implements ILatLngBounds {\r\n  private _objectInstance: any;\r\n\r\n  @InstanceProperty northeast: ILatLng;\r\n  @InstanceProperty southwest: ILatLng;\r\n  @InstanceProperty farLeft: ILatLng;\r\n  @InstanceProperty farRight: ILatLng;\r\n  @InstanceProperty nearLeft: ILatLng;\r\n  @InstanceProperty nearRight: ILatLng;\r\n  @InstanceProperty type: string;\r\n\r\n  constructor(southwest: LatLngBounds, northeast: LatLngBounds, farLeft: ILatLng, farRight: ILatLng, nearLeft: ILatLng, nearRight: ILatLng) {\r\n    this._objectInstance = new (GoogleMaps.getPlugin()).VisibleRegion(southwest, northeast, farLeft, farRight, nearLeft, nearRight);\r\n  }\r\n\r\n  /**\r\n   * Converts to string\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  toString(): string { return; }\r\n\r\n  /**\r\n   * Returns a string of the form \"lat_sw,lng_sw,lat_ne,lng_ne\" for this bounds, where \"sw\" corresponds to the southwest corner of the bounding box, while \"ne\" corresponds to the northeast corner of that box.\r\n   * @param precision {number}\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  toUrlValue(precision?: number): string { return; }\r\n\r\n\r\n  /**\r\n   * Returns true if the given lat/lng is in this bounds.\r\n   * @param LatLng {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  contains(LatLng: ILatLng): boolean { return; }\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n * You can listen to these events where appropriate\r\n */\r\nexport const GoogleMapsEvent: { [eventName: string]: string; } = {\r\n  MAP_READY: 'map_ready',\r\n  MAP_LOADED: 'map_loaded',\r\n  MAP_CLICK: 'map_click',\r\n  MAP_LONG_CLICK: 'map_long_click',\r\n  MY_LOCATION_BUTTON_CLICK: 'my_location_button_click',\r\n  INDOOR_BUILDING_FOCUSED: 'indoor_building_focused',\r\n  INDOOR_LEVEL_ACTIVATED: 'indoor_level_activated',\r\n  CAMERA_MOVE_START: 'camera_move_start',\r\n  CAMERA_MOVE: 'camera_move',\r\n  CAMERA_MOVE_END: 'camera_move_end',\r\n  OVERLAY_CLICK: 'overlay_click',\r\n  POLYGON_CLICK: 'polygon_click',\r\n  POLYLINE_CLICK: 'polyline_click',\r\n  CIRCLE_CLICK: 'circle_click',\r\n  GROUND_OVERLAY_CLICK: 'groundoverlay_click',\r\n  INFO_CLICK: 'info_click',\r\n  INFO_LONG_CLICK: 'info_long_click',\r\n  INFO_CLOSE: 'info_close',\r\n  INFO_OPEN: 'info_open',\r\n  CLUSTER_CLICK: 'cluster_click',\r\n  MARKER_CLICK: 'marker_click',\r\n  MARKER_DRAG: 'marker_drag',\r\n  MARKER_DRAG_START: 'marker_drag_start',\r\n  MARKER_DRAG_END: 'marker_drag_end',\r\n  MAP_DRAG: 'map_drag',\r\n  MAP_DRAG_START: 'map_drag_start',\r\n  MAP_DRAG_END: 'map_drag_end'\r\n};\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport const GoogleMapsAnimation: { [animationName: string]: string; } = {\r\n  BOUNCE: 'BOUNCE',\r\n  DROP: 'DROP'\r\n};\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport const GoogleMapsMapTypeId: { [mapType: string]: MapType; } = {\r\n  NORMAL: 'MAP_TYPE_NORMAL',\r\n  ROADMAP: 'MAP_TYPE_ROADMAP',\r\n  SATELLITE: 'MAP_TYPE_SATELLITE',\r\n  HYBRID: 'MAP_TYPE_HYBRID',\r\n  TERRAIN: 'MAP_TYPE_TERRAIN',\r\n  NONE: 'MAP_TYPE_NONE'\r\n};\r\n\r\n/**\r\n * @name Google Maps\r\n * @description\r\n * This plugin uses the native Google Maps SDK\r\n * Note: As of Ionic native 4.0, this using the 2.0 version of the google maps plugin. Please make sure your plugin is updated\r\n * @usage\r\n * ```typescript\r\n * import {\r\n *  GoogleMaps,\r\n *  GoogleMap,\r\n *  GoogleMapsEvent,\r\n *  GoogleMapOptions,\r\n *  CameraPosition,\r\n *  MarkerOptions,\r\n *  Marker\r\n * } from '@ionic-native/google-maps';\r\n * import { Component } from \"@angular/core/\";\r\n *\r\n * @Component({\r\n *   selector: 'page-home',\r\n *   templateUrl: 'home.html'\r\n * })\r\n * export class HomePage {\r\n *   map: GoogleMap;\r\n *   mapElement: HTMLElement;\r\n *   constructor(private googleMaps: GoogleMaps) { }\r\n *\r\n *   ionViewDidLoad() {\r\n *    this.loadMap();\r\n *   }\r\n *\r\n *  loadMap() {\r\n *     this.mapElement = document.getElementById('map');\r\n *\r\n *     let mapOptions: GoogleMapOptions = {\r\n *       camera: {\r\n *         target: {\r\n *           lat: 43.0741904,\r\n *           lng: -89.3809802\r\n *         },\r\n *         zoom: 18,\r\n *         tilt: 30\r\n *       }\r\n *     };\r\n *\r\n *     this.map = this.googleMaps.create(this.mapElement, mapOptions);\r\n *\r\n *     // Wait the MAP_READY before using any methods.\r\n *     this.map.one(GoogleMapsEvent.MAP_READY)\r\n *       .then(() => {\r\n *         console.log('Map is ready!');\r\n *\r\n *         // Now you can use all methods safely.\r\n *         this.map.addMarker({\r\n *             title: 'Ionic',\r\n *             icon: 'blue',\r\n *             animation: 'DROP',\r\n *             position: {\r\n *               lat: 43.0741904,\r\n *               lng: -89.3809802\r\n *             }\r\n *           })\r\n *           .then(marker => {\r\n *             marker.on(GoogleMapsEvent.MARKER_CLICK)\r\n *               .subscribe(() => {\r\n *                 alert('clicked');\r\n *               });\r\n *           });\r\n *\r\n *       });\r\n *   }\r\n * }\r\n *\r\n * ```\r\n * @classes\r\n * GoogleMap\r\n * Circle\r\n * Encoding\r\n * Environment\r\n * Geocoder\r\n * GroundOverlay\r\n * HtmlInfoWindow\r\n * Geocoder\r\n * LatLng\r\n * LatLngBounds\r\n * Marker\r\n * MarkerCluster\r\n * Polygon\r\n * Polyline\r\n * Spherical\r\n * TileOverlay\r\n * BaseClass\r\n * BaseArrayClass\r\n * @interfaces\r\n * GoogleMapOptions\r\n * CameraPosition\r\n * CircleOptions\r\n * GeocoderRequest\r\n * GeocoderResult\r\n * GroundOverlayOptions\r\n * ILatLng\r\n * MarkerIcon\r\n * MarkerOptions\r\n * MarkerClusterIcon\r\n * MarkerClusterOptions\r\n * MyLocation\r\n * MyLocationOptions\r\n * PolygonOptions\r\n * PolylineOptions\r\n * TileOverlayOptions\r\n * VisibleRegion\r\n */\r\n@Plugin({\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps',\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  repo: 'https://github.com/mapsplugin/cordova-plugin-googlemaps#multiple_maps',\r\n  install: 'ionic cordova plugin add https://github.com/mapsplugin/cordova-plugin-googlemaps#multiple_maps --variable API_KEY_FOR_ANDROID=\"YOUR_ANDROID_API_KEY_IS_HERE\" --variable API_KEY_FOR_IOS=\"YOUR_IOS_API_KEY_IS_HERE\"',\r\n  installVariables: ['API_KEY_FOR_ANDROID', 'API_KEY_FOR_IOS'],\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class GoogleMaps extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Keep a single instance of Environment in memory\r\n   * @hidden\r\n   */\r\n  _environment: Environment = new Environment();\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  _spherical: Spherical = new Spherical();\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  _encoding: Encoding = new Encoding();\r\n\r\n  /**\r\n   * Creates a new GoogleMap instance\r\n   * @param element {string | HTMLElement} Element ID or reference to attach the map to\r\n   * @param options {any} Options\r\n   * @return {GoogleMap}\r\n   */\r\n  create(element: string | HTMLElement, options?: GoogleMapOptions): GoogleMap {\r\n    return new GoogleMap(element, options);\r\n  }\r\n\r\n  /**\r\n   * Method that returns an instance of Environment class\r\n   * @return {Environment}\r\n   */\r\n  environment(): Environment {\r\n    return this._environment;\r\n  }\r\n\r\n  /**\r\n   * Method that returns an instance of Spherical class\r\n   * @returns {Spherical}\r\n   */\r\n  spherical(): Spherical {\r\n    return this._spherical;\r\n  }\r\n\r\n  /**\r\n   * Method that returns an instance of Encoding class\r\n   * @returns {Encoding}\r\n   */\r\n  encoding(): Encoding {\r\n    return this._encoding;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\r\n/**\r\n * @hidden\r\n * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/BaseClass/README.md\r\n */\r\n@Plugin({\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.BaseClass',\r\n  repo: ''\r\n})\r\nexport class BaseClass {\r\n  protected _objectInstance: any;\r\n\r\n  /**\r\n   * Adds an event listener.\r\n   *\r\n   * @return {Observable<any>}\r\n   */\r\n  @CordovaInstance({\r\n    destruct: true,\r\n    observable: true,\r\n    clearFunction: 'removeEventListener',\r\n    clearWithArgs: true\r\n  })\r\n  addEventListener(eventName: string): Observable<any> { return; }\r\n\r\n  /**\r\n   * Adds an event listener that works once.\r\n   *\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance({ destruct: true })\r\n  addListenerOnce(eventName: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Gets a value\r\n   * @param key\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  get(key: string): any { return; }\r\n\r\n  /**\r\n   * Sets a value\r\n   * @param key\r\n   * @param value\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  set(key: string, value: any, noNotify?: boolean): void { }\r\n\r\n  /**\r\n   * Bind a key to another object\r\n   * @param key {string}\r\n   * @param target {any}\r\n   * @param targetKey? {string}\r\n   * @param noNotify? {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  bindTo(key: string, target: any, targetKey?: string, noNotify?: boolean): void { }\r\n\r\n  /**\r\n   * Listen to a map event.\r\n   *\r\n   * @return {Observable<any>}\r\n   */\r\n  @CordovaInstance({\r\n    observable: true,\r\n    destruct: true,\r\n    clearFunction: 'off',\r\n    clearWithArgs: true\r\n  })\r\n  on(eventName: string): Observable<any> { return; }\r\n\r\n  /**\r\n   * Listen to a map event only once.\r\n   *\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance({ destruct: true })\r\n  one(eventName: string): Promise<any> { return; };\r\n\r\n  /**\r\n   * Clears all stored values\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  empty(): void { }\r\n\r\n  /**\r\n   * Dispatch event.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  trigger(eventName: string, ...parameters: any[]): void {}\r\n}\r\n\r\n/**\r\n * @hidden\r\n * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/BaseArrayClass/README.md\r\n */\r\n@Plugin({\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.BaseArrayClass',\r\n  repo: ''\r\n})\r\nexport class BaseArrayClass<T> extends BaseClass {\r\n\r\n  constructor(initialData?: T[] | any) {\r\n    super();\r\n    if (initialData instanceof GoogleMaps.getPlugin().BaseArrayClass) {\r\n      this._objectInstance = initialData;\r\n    } else {\r\n      this._objectInstance = new (GoogleMaps.getPlugin().BaseArrayClass)(initialData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all elements from the array.\r\n   * @param noNotify? {boolean} Set true to prevent remove_at events.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  empty(noNotify?: boolean): void {}\r\n\r\n  /**\r\n   * Iterate over each element, calling the provided callback.\r\n   * @param fn {Function}\r\n   * @param callback? {Function}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  forEach(fn: ((element: T, index?: number) => void) | ((element: T, callback: () => void) => void), callback?: () => void): void {}\r\n\r\n  /**\r\n   * Iterate over each element, calling the provided callback.\r\n   * Then you can get the results of each callback.\r\n   * @param fn {Function}\r\n   * @param callback? {Function}\r\n   * @return {Array<Object>} returns a new array with the results\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  map(fn: Function, callback?: ((element: T, index: number) => T) | ((element: T, callback: (newElement: T) => void) => void)): T[] { return; }\r\n\r\n  /**\r\n   * The filter() method creates a new array with all elements that pass the test implemented by the provided function.\r\n   * @param fn {Function}\r\n   * @param callback? {Function}\r\n   * @return {Array<Object>} returns a new array with the results\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  filter(fn: Function, callback?: ((element: T, index: number) => T) | ((element: T, callback: (newElement: T) => void) => void)): T[] { return; }\r\n\r\n  /**\r\n   * Returns a reference to the underlying Array.\r\n   * @return {Array<Object>}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getArray(): T[] { return; }\r\n\r\n  /**\r\n   * Returns the element at the specified index.\r\n   * @param index {number}\r\n   * @return {Object}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getAt(index: number): any {}\r\n\r\n  /**\r\n   * Returns the number of the elements.\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getLength(): number { return; }\r\n\r\n  /**\r\n   * The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.\r\n   * @param element {Object}\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  indexOf(element: T): number { return; }\r\n\r\n  /**\r\n   * The reverse() method reverses an array in place.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  reverse(): void {}\r\n\r\n  /**\r\n   * The sort() method sorts the elements of an array in place and returns the array.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  sort(): void {}\r\n\r\n  /**\r\n   * Inserts an element at the specified index.\r\n   * @param index {number}\r\n   * @param element {Object}\r\n   * @param noNotify? {boolean} Set true to prevent insert_at events.\r\n   * @return {Object}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  insertAt(index: number, element: T, noNotify?: boolean) {}\r\n\r\n  /**\r\n   * Removes the last element of the array and returns that element.\r\n   * @param noNotify? {boolean} Set true to prevent remove_at events.\r\n   * @return {Object}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  pop(noNotify?: boolean): T { return; }\r\n\r\n  /**\r\n   * Adds one element to the end of the array and returns the new length of the array.\r\n   * @param element {object}\r\n   * @param noNotify? {boolean} Set true to prevent insert_at events.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  push(element: T, noNotify?: boolean): void {}\r\n\r\n  /**\r\n   * Removes an element from the specified index.\r\n   * @param index {number}\r\n   * @param noNotify? {boolean} Set true to prevent insert_at events.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  removeAt(index: number, noNotify?: boolean): void {}\r\n\r\n  /**\r\n   * Sets an element at the specified index.\r\n   * @param index {number}\r\n   * @param element {object}\r\n   * @param noNotify? {boolean} Set true to prevent set_at events.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setAt(index: number, element: T, noNotify?: boolean): void {}\r\n}\r\n\r\n/**\r\n * @hidden\r\n * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/Circle/README.md\r\n */\r\nexport class Circle extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super();\r\n    this._map = _map;\r\n    this._objectInstance = _objectInstance;\r\n  }\r\n\r\n  /**\r\n   * Return the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any { return this._map; }\r\n\r\n  /**\r\n   * Change the center position.\r\n   * @param latLng {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setCenter(latLng: ILatLng): void {}\r\n\r\n  /**\r\n   * Return the current center position\r\n   * @return {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCenter(): ILatLng { return; }\r\n\r\n  /**\r\n   * Return the current circle radius.\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getRadius(): number { return; }\r\n\r\n  /**\r\n   * Change the circle radius.\r\n   * @param radius {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setRadius(radius: number): void {}\r\n\r\n  /**\r\n   * Change the filling color (inner color).\r\n   * @param color {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setFillColor(color: string): void {}\r\n\r\n  /**\r\n   * Return the current circle filling color (inner color).\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getFillColor(): string { return; }\r\n\r\n  /**\r\n   * Change the stroke width.\r\n   * @param strokeWidth {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStrokeWidth(strokeWidth: number): void {}\r\n\r\n  /**\r\n   * Return the current circle stroke width (unit: pixel).\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStrokeWidth(): number { return; }\r\n\r\n  /**\r\n   * Change the stroke color (outter color).\r\n   * @param strokeColor {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStrokeColor(strokeColor: string): void {}\r\n\r\n  /**\r\n   * Return the current circle stroke color (outer color).\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStrokeColor(): string { return; }\r\n\r\n  /**\r\n   * Change clickablity of the circle.\r\n   * @param clickable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setClickable(clickable: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the circle is clickable.\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getClickable(): boolean { return; }\r\n\r\n  /**\r\n   * Change the circle zIndex order.\r\n   * @param zIndex {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZIndex(zIndex: number): void {}\r\n\r\n  /**\r\n   * Return the current circle zIndex.\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZIndex(): number { return; }\r\n\r\n  /**\r\n   * Remove the circle.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  remove(): void {}\r\n\r\n  /**\r\n   * Return the latLngBounds (rectangle) that contains the circle.\r\n   * @return {LatLngBounds}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getBounds(): LatLngBounds { return; }\r\n\r\n  /**\r\n   * Set circle visibility\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {}\r\n\r\n  /**\r\n   * Returns a boolean that indicates whether the circle is visible\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisible(): boolean { return; }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.environment',\r\n  repo: ''\r\n})\r\nexport class Environment extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Get the open source software license information for Google Maps Android API v2 and Google Maps SDK for iOS.\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getLicenseInfo(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Specifies the background color of the app.\r\n   * @param color\r\n   */\r\n  @Cordova({ sync: true })\r\n  setBackgroundColor(color: string): void {}\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.Geocoder',\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  repo: ''\r\n})\r\nexport class Geocoder {\r\n  /**\r\n   * Converts position to address and vice versa\r\n   * @param {GeocoderRequest} request Request object with either an address or a position\r\n   * @return {Promise<GeocoderResult[] | BaseArrayClass<GeocoderResult>>}\r\n   */\r\n  geocode(request: GeocoderRequest): Promise<GeocoderResult[] | BaseArrayClass<GeocoderResult>> {\r\n\r\n    if (request.address instanceof Array || Array.isArray(request.address) ||\r\n        request.position instanceof Array || Array.isArray(request.position)) {\r\n      // -------------------------\r\n      // Geocoder.geocode({\r\n      //   address: [\r\n      //    \"Kyoto, Japan\",\r\n      //    \"Tokyo, Japan\"\r\n      //   ]\r\n      // })\r\n      // -------------------------\r\n      return new Promise<BaseArrayClass<GeocoderResult>>((resolve, reject) => {\r\n        GoogleMaps.getPlugin().Geocoder.geocode(request, (mvcArray: any) => {\r\n          if (mvcArray) {\r\n            resolve(new BaseArrayClass(mvcArray));\r\n          } else {\r\n            reject();\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      // -------------------------\r\n      // Geocoder.geocode({\r\n      //   address: \"Kyoto, Japan\"\r\n      // })\r\n      // -------------------------\r\n      return new Promise<GeocoderResult[]>((resolve, reject) => {\r\n        GoogleMaps.getPlugin().Geocoder.geocode(request, (results: GeocoderResult[]) => {\r\n          if (results) {\r\n            resolve(results);\r\n          } else {\r\n            reject();\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.geometry.encoding',\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  repo: ''\r\n})\r\nexport class Encoding {\r\n  /**\r\n   * Decodes an encoded path string into a sequence of LatLngs.\r\n   * @param encoded {string} an encoded path string\r\n   * @param precision? {number} default: 5\r\n   * @return {LatLng}\r\n   */\r\n  @Cordova({ sync: true })\r\n  decodePath(encoded: string, precision?: number): LatLng { return; }\r\n\r\n  /**\r\n   * Encodes a sequence of LatLngs into an encoded path string.\r\n   * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>} a sequence of LatLngs\r\n   * @return {string}\r\n   */\r\n  @Cordova({ sync: true })\r\n  encodePath(path: Array<ILatLng> | BaseArrayClass<ILatLng>): string { return; }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.geometry.spherical',\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  repo: ''\r\n})\r\nexport class Spherical {\r\n  /**\r\n   * Returns the distance, in meters, between two LatLngs.\r\n   * @param locationA {ILatLng}\r\n   * @param locationB {ILatLng}\r\n   * @return {number}\r\n   */\r\n  @Cordova({ sync: true })\r\n  computeDistanceBetween(from: ILatLng, to: ILatLng): number { return; }\r\n\r\n  /**\r\n   * Returns the LatLng resulting from moving a distance from an origin in the specified heading (expressed in degrees clockwise from north)\r\n   * @param from {ILatLng}\r\n   * @param distance {number}\r\n   * @param heading {number}\r\n   * @return {LatLng}\r\n   */\r\n  @Cordova({ sync: true })\r\n  computeOffset(from: ILatLng, distance: number, heading: number): LatLng { return; }\r\n\r\n  /**\r\n   * Returns the location of origin when provided with a LatLng destination, meters travelled and original heading. Headings are expressed in degrees clockwise from North. This function returns null when no solution is available.\r\n   * @param to {ILatLng} The destination LatLng.\r\n   * @param distance {number} The distance travelled, in meters.\r\n   * @param heading {number} The heading in degrees clockwise from north.\r\n   * @return {LatLng}\r\n   */\r\n  @Cordova({ sync: true })\r\n  computeOffsetOrigin(to: ILatLng, distance: number, heading: number): LatLng { return; }\r\n\r\n  /**\r\n   * Returns the length of the given path.\r\n   * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}\r\n   * @return {number}\r\n   */\r\n  @Cordova({ sync: true })\r\n  computeLength(path: Array<ILatLng> | BaseArrayClass<ILatLng>): number { return; }\r\n\r\n  /**\r\n   * Returns the area of a closed path. The computed area uses the same units as the radius.\r\n   * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}.\r\n   * @return {number}\r\n   */\r\n  @Cordova({ sync: true })\r\n  computeArea(path: Array<ILatLng> | BaseArrayClass<ILatLng>): number { return; }\r\n\r\n  /**\r\n   * Returns the signed area of a closed path. The signed area may be used to determine the orientation of the path.\r\n   * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}.\r\n   * @return {number}\r\n   */\r\n  @Cordova({ sync: true })\r\n  computeSignedArea(path: Array<ILatLng> | BaseArrayClass<ILatLng>): number { return; }\r\n\r\n  /**\r\n   * Returns the heading from one LatLng to another LatLng. Headings are expressed in degrees clockwise from North within the range (-180,180).\r\n   * @param from {ILatLng}\r\n   * @param to {ILatLng}\r\n   * @return {number}\r\n   */\r\n  @Cordova({ sync: true })\r\n  computeHeading(from: ILatLng, to: ILatLng): number { return; }\r\n\r\n  /**\r\n   * Returns the LatLng which lies the given fraction of the way between the origin LatLng and the destination LatLng.\r\n   * @param from {ILatLng}     The LatLng from which to start.\r\n   * @param to {ILatLng}       The LatLng toward which to travel.\r\n   * @param fraction {number}  A fraction of the distance to travel from 0.0 to 1.0 .\r\n   * @return {LatLng}\r\n   */\r\n  @Cordova({ sync: true })\r\n  interpolate(from: ILatLng, to: ILatLng, fraction: number): LatLng { return; }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  pluginName: 'GoogleMaps',\r\n  plugin: 'cordova-plugin-googlemaps'\r\n})\r\nexport class GoogleMap extends BaseClass {\r\n  constructor(element: string | HTMLElement, options?: GoogleMapOptions) {\r\n    super();\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\r\n      if (typeof element === 'string') {\r\n        element = document.getElementById(<string>element);\r\n      }\r\n      this._objectInstance = GoogleMaps.getPlugin().Map.getMap(element, options);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Changes the map div\r\n   * @param domNode\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setDiv(domNode?: HTMLElement): void { }\r\n\r\n  /**\r\n   * Returns the map HTML element\r\n   * @return {HTMLElement}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getDiv(): HTMLElement { return; }\r\n\r\n  /**\r\n   * Changes the map type id\r\n   * @param mapTypeId {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setMapTypeId(mapTypeId: MapType): void { }\r\n\r\n  /**\r\n   * Moves the camera with animation\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  animateCamera(cameraPosition: CameraPosition<any>): Promise<any> { return; }\r\n\r\n  /**\r\n   * Zooming in the camera with animation\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  animateCameraZoomIn(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Zooming out the camera with animation\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  animateCameraZoomOut(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Moves the camera without animation\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  moveCamera(cameraPosition: CameraPosition<any>): Promise<any> { return; }\r\n\r\n  /**\r\n   * Zooming in the camera without animation\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  moveCameraZoomIn(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Zooming out the camera without animation\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  moveCameraZoomOut(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get the position of the camera.\r\n   * @return {CameraPosition}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCameraPosition(): CameraPosition<ILatLng> { return; }\r\n\r\n  /**\r\n   * Get the current camera target position\r\n   * @return {Promise<CameraPosition>}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCameraTarget(): ILatLng { return; }\r\n\r\n  /**\r\n   * Get the current camera zoom level\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCameraZoom(): number { return; }\r\n\r\n  /**\r\n   * Get the current camera bearing\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCameraBearing(): number { return; }\r\n\r\n  /**\r\n   * Get the current camera tilt (view angle)\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCameraTilt(): number { return; }\r\n\r\n  /**\r\n   * Set the center position of the camera view\r\n   * @param latLng {ILatLng | Array<ILatLng>}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setCameraTarget(latLng: ILatLng | Array<ILatLng>): void { }\r\n\r\n  /**\r\n   * Set zoom level of the camera\r\n   * @param zoomLevel {number} Zoom level\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setCameraZoom(zoomLevel: number): void {}\r\n\r\n  /**\r\n   * Set the camera view angle\r\n   * @param tiltLevel {number} Tilt level\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setCameraTilt(tiltLevel: number): void {}\r\n\r\n  /**\r\n   * Set camera bearing\r\n   * @param bearing {any}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setCameraBearing(bearing: any): void {}\r\n\r\n  /**\r\n   * Change the center of the map by the given distance in pixels\r\n   * @param x {any}\r\n   * @param y {any}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  panBy(x: string | number, y: string | number): void { }\r\n\r\n  /**\r\n   * Get the current visible region (southWest and northEast)\r\n   * @return {VisibleRegion}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisibleRegion(): VisibleRegion { return; }\r\n\r\n  /**\r\n   * Get the current device location\r\n   * @return {Promise<MyLocation>}\r\n   */\r\n  @CordovaInstance()\r\n  getMyLocation(options?: MyLocationOptions): Promise<MyLocation> { return; }\r\n\r\n  /**\r\n   * Set false to ignore all clicks on the map\r\n   * @param isClickable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setClickable(isClickable: boolean): void {}\r\n\r\n  /**\r\n   * Destroy a map completely\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  remove(): void {}\r\n\r\n  /**\r\n   * Remove all overlays, such as marker\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  clear(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Convert the unit from LatLng to the pixels from the left/top of the map div\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  fromLatLngToPoint(latLng: ILatLng): Promise<any[]> { return; }\r\n\r\n  /**\r\n   * Convert the unit from the pixels from the left/top to the LatLng\r\n   * @return {Promise<LatLng>}\r\n   */\r\n  @CordovaInstance()\r\n  fromPointToLatLng(point: any): Promise<LatLng> { return; }\r\n\r\n  /**\r\n   * Set true if you want to show the MyLocation button\r\n   * @param enabled {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setMyLocationEnabled(enabled: boolean): void {}\r\n\r\n  /**\r\n   * Get the currently focused building\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  getFocusedBuilding(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set true if you want to show the indoor map\r\n   * @param enabled {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setIndoorEnabled(enabled: boolean): void {}\r\n\r\n  /**\r\n   * Set true if you want to show the traffic layer\r\n   * @param enabled {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setTrafficEnabled(enabled: boolean): void {}\r\n\r\n  /**\r\n   * Set true if you want to show the compass button\r\n   * @param enabled {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setCompassEnabled(enabled: boolean): void {}\r\n\r\n  /**\r\n   * Sets the preference for whether all gestures should be enabled or disabled\r\n   * @param enabled {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setAllGesturesEnabled(enabled: boolean): void {}\r\n\r\n  /**\r\n   * Set visibility of the map\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {}\r\n\r\n  /**\r\n   * Adjust the map padding (same as CSS padding rule)\r\n   * @param top {number}\r\n   * @param right {number}\r\n   * @param left {number}\r\n   * @param bottom {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setPadding(top?: number, right?: number, bottom?: number, left?: number): void { }\r\n\r\n  /**\r\n   * Set options\r\n   * @param options\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setOptions(options: GoogleMapOptions): void {}\r\n\r\n  /**\r\n   * Adds a marker\r\n   * @return {Promise<Marker | any>}\r\n   */\r\n  @InstanceCheck()\r\n  addMarker(options: MarkerOptions): Promise<Marker | any> {\r\n    return new Promise<Marker>((resolve, reject) => {\r\n      this._objectInstance.addMarker(options, (marker: any) => {\r\n        if (marker) {\r\n          resolve(new Marker(this, marker));\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  @InstanceCheck()\r\n  addMarkerCluster(options: MarkerClusterOptions): Promise<MarkerCluster | any> {\r\n    return new Promise<MarkerCluster>((resolve, reject) => {\r\n      this._objectInstance.addMarkerCluster(options, (markerCluster: any) => {\r\n        if (markerCluster) {\r\n          resolve(new MarkerCluster(this, markerCluster));\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds a circle\r\n   * @return {Promise<Circle | any>}\r\n   */\r\n  @InstanceCheck()\r\n  addCircle(options: CircleOptions): Promise<Circle | any> {\r\n    return new Promise<Circle>((resolve, reject) => {\r\n      this._objectInstance.addCircle(options, (circle: any) => {\r\n        if (circle) {\r\n          resolve(new Circle(this, circle));\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds a polygon\r\n   * @return {Promise<Polygon | any>}\r\n   */\r\n  @InstanceCheck()\r\n  addPolygon(options: PolygonOptions): Promise<Polygon | any> {\r\n    return new Promise<Polygon>((resolve, reject) => {\r\n      this._objectInstance.addPolygon(options, (polygon: any) => {\r\n        if (polygon) {\r\n          resolve(new Polygon(this, polygon));\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @return {Promise<Polyline | any>}\r\n   */\r\n  @InstanceCheck()\r\n  addPolyline(options: PolylineOptions): Promise<Polyline | any> {\r\n    return new Promise<Polyline>((resolve, reject) => {\r\n      this._objectInstance.addPolyline(options, (polyline: any) => {\r\n        if (polyline) {\r\n          resolve(new Polyline(this, polyline));\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @return {Promise<TileOverlay | any>}\r\n   */\r\n  @InstanceCheck()\r\n  addTileOverlay(options: TileOverlayOptions): Promise<TileOverlay | any> {\r\n    return new Promise<TileOverlay>((resolve, reject) => {\r\n      this._objectInstance.addTileOverlay(options, (tileOverlay: any) => {\r\n        if (tileOverlay) {\r\n          resolve(new TileOverlay(this, tileOverlay));\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @return {Promise<GroundOverlay | any>}\r\n   */\r\n  @InstanceCheck()\r\n  addGroundOverlay(options: GroundOverlayOptions): Promise<GroundOverlay | any> {\r\n    return new Promise<GroundOverlay>((resolve, reject) => {\r\n      this._objectInstance.addGroundOverlay(options, (groundOverlay: any) => {\r\n        if (groundOverlay) {\r\n          resolve(new GroundOverlay(this, groundOverlay));\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Refreshes layout.\r\n   * You can execute it, but you don't need to do that. The plugin does this automatically.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  refreshLayout(): void {}\r\n\r\n  /**\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  toDataURL(): Promise<any> { return; }\r\n\r\n  // /**\r\n  //  * @return {Promise<KmlOverlay | any>}\r\n  //  */\r\n  // @InstanceCheck()\r\n  // addKmlOverlay(options: KmlOverlayOptions): Promise<KmlOverlay | any> {\r\n  //   return new Promise<KmlOverlay>((resolve, reject) => {\r\n  //     this._objectInstance.addKmlOverlay(options, (kmlOverlay: any) => {\r\n  //       if (kmlOverlay) {\r\n  //         resolve(new KmlOverlay(kmlOverlay));\r\n  //       } else {\r\n  //         reject();\r\n  //       }\r\n  //     });\r\n  //   });\r\n  // }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class GroundOverlay extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super();\r\n    this._map = _map;\r\n    this._objectInstance = _objectInstance;\r\n  }\r\n\r\n  /**\r\n   * Return the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any { return this._map; }\r\n\r\n  /**\r\n   * Change the bounds of the GroundOverlay\r\n   * @param bounds { ILatLng[]}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setBounds(bounds: ILatLng[]): void {}\r\n\r\n  /**\r\n   * Change the bearing of the ground overlay\r\n   * @param bearing {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setBearing(bearing: number): void { }\r\n\r\n  /**\r\n   * Return the current bearing value\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getBearing(): number { return; }\r\n\r\n  /**\r\n   * Change the image of the ground overlay\r\n   * @param image {string} URL of image\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setImage(image: string): void {};\r\n\r\n  /**\r\n   * Change the opacity of the ground overlay from 0.0 to 1.0\r\n   * @param opacity {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setOpacity(opacity: number): void { }\r\n\r\n  /**\r\n   * Return the current opacity\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getOpacity(): number { return; }\r\n\r\n  /**\r\n   * Change clickablity of the ground overlay\r\n   * @param clickable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setClickable(clickable: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the ground overlay is clickable\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getClickable(): boolean { return; }\r\n\r\n  /**\r\n   * Change visibility of the ground overlay\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void { }\r\n\r\n  /**\r\n   * Return true if the ground overlay is visible\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisible(): boolean { return; }\r\n\r\n  /**\r\n   * Change the ground overlay zIndex order\r\n   * @param index {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZIndex(index: number): void {}\r\n\r\n  /**\r\n   * Return the current ground overlay zIndex\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZIndex(): number { return; }\r\n\r\n  /**\r\n   * Remove the ground overlay\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  remove(): void {}\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n plugin: 'cordova-plugin-googlemaps',\r\n pluginName: 'GoogleMaps',\r\n pluginRef: 'plugin.google.maps.HtmlInfoWindow',\r\n repo: ''\r\n})\r\nexport class HtmlInfoWindow<T> extends IonicNativePlugin {\r\n  private _objectInstance: any;\r\n\r\n  constructor() {\r\n   super();\r\n   if (checkAvailability(HtmlInfoWindow.getPluginRef(), null, HtmlInfoWindow.getPluginName()) === true) {\r\n     this._objectInstance = new (HtmlInfoWindow.getPlugin())();\r\n   }\r\n  }\r\n\r\n  /**\r\n   * Change the backgroundColor\r\n   * @param color {string}\r\n   */\r\n  @CordovaInstance()\r\n  setBackgroundColor(color: string): void {}\r\n\r\n  /**\r\n   * Set your HTML contents.\r\n   * @param content {any} String containing text or HTML element\r\n   */\r\n  @CordovaInstance()\r\n  setContent(content: string | Element): void {}\r\n\r\n  /**\r\n   * Open the htmlInfoWindow\r\n   * @param marker {Marker}\r\n   */\r\n  @CordovaInstance()\r\n  open(marker: any): any {}\r\n\r\n  /**\r\n   * Close the htmlInfoWindow\r\n   */\r\n  @CordovaInstance()\r\n  close(): void {}\r\n\r\n}\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class Marker extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super();\r\n    this._map = _map;\r\n    this._objectInstance = _objectInstance;\r\n  }\r\n\r\n  /**\r\n   * Return the ID of instance.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getId(): number { return; }\r\n\r\n  /**\r\n   * Return the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any { return this._map; }\r\n\r\n  /**\r\n   * Set the marker position.\r\n   * @param latLng {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setPosition(latLng: ILatLng): void { return; }\r\n\r\n  /**\r\n   * Return the marker position.\r\n   * @return {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getPosition(): ILatLng { return; }\r\n\r\n  /**\r\n   * Show the normal infoWindow of the marker.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  showInfoWindow(): void {}\r\n\r\n  /**\r\n   * Hide the normal infoWindow of the marker.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  hideInfoWindow(): void {}\r\n\r\n  /**\r\n   * Specify the animation either `DROP` or `BOUNCE`\r\n   * @param animation {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setAnimation(animation: string): void {}\r\n\r\n  /**\r\n   * Set true if you **do not want** to move the map when you click on the marker.\r\n   * @param disableAutoPan {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setDisableAutoPan(disableAutoPan: boolean): void {}\r\n\r\n  /**\r\n   * Set false if you want to hide the marker.\r\n   * @param visible\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the marker is visible\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  isVisible(): boolean { return; }\r\n\r\n  /**\r\n   * Change title of the normal infoWindow.\r\n   * @param title {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setTitle(title: string): void {}\r\n\r\n  /**\r\n   * Return the title strings.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getTitle(): string { return; }\r\n\r\n  /**\r\n   * Change snippet of the normal infoWindow.\r\n   * @param snippet {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setSnippet(snippet: string): void {}\r\n\r\n  /**\r\n   * Return the snippet strings.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getSnippet(): string { return; }\r\n\r\n  /**\r\n   * Change the marker opacity from 0.0 to 1.0.\r\n   * @param alpha {number} Opacity\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setOpacity(alpha: number): void {}\r\n\r\n  /**\r\n   * Return the marker opacity.\r\n   * @return {number} Opacity\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getOpacity(): number { return; }\r\n\r\n  /**\r\n   * Remove the marker.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  remove(): void {}\r\n\r\n  /**\r\n   * Change the info window anchor. This defaults to 50% from the left of the image and at the bottom of the image.\r\n   * @param x {number} Distance from left of the icon image in pixels.\r\n   * @param y {number} Distance from top of the icon image in pixels.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setIconAnchor(x: number, y: number): void {}\r\n\r\n  /**\r\n   * Change the info window anchor. This defaults to 50% from the left of the image and at the top of the image.\r\n   * @param x {number} Distance from left of the icon image in pixels.\r\n   * @param y {number} Distance from top of the icon image in pixels.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setInfoWindowAnchor(x: number, y: number): void {}\r\n\r\n  /**\r\n   * Return true if the infoWindow is shown on the marker\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  isInfoWindowShown(): boolean { return; }\r\n\r\n  /**\r\n   * Return the marker hash code.\r\n   * @return {string} Marker hash code\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getHashCode(): string { return; }\r\n\r\n  /**\r\n   * Higher zIndex value overlays will be drawn on top of lower zIndex value tile layers and overlays.\r\n   * @param y {number} z-index\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZIndex(zIndex: number): void {}\r\n\r\n  /**\r\n   * Get z-index\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZIndex(): number { return; }\r\n\r\n  /**\r\n   * Set true if you allow all users to drag the marker.\r\n   * @param draggable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setDraggable(draggable: boolean): void { }\r\n\r\n  /**\r\n   * Return true if the marker drag is enabled.\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  isDraggable(): boolean { return; }\r\n\r\n  /**\r\n   * Set true if you want to be flat marker.\r\n   * @param flat {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setFlat(flat: boolean): void { return; }\r\n\r\n  /**\r\n   * Change icon url and/or size\r\n   * @param icon\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setIcon(icon: MarkerIcon): void { return; }\r\n\r\n  /**\r\n   * Set the marker rotation angle.\r\n   * @param rotation {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setRotation(rotation: number): void { }\r\n\r\n  /**\r\n   * Return the marker rotation angle.\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getRotation(): number { return; }\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class MarkerCluster extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super();\r\n    this._map = _map;\r\n    this._objectInstance = _objectInstance;\r\n  }\r\n\r\n  @CordovaInstance({ sync: true })\r\n  addMarker(marker: MarkerOptions): void {}\r\n\r\n  @CordovaInstance({ sync: true })\r\n  addMarkers(markers: MarkerOptions[]): void {}\r\n\r\n  @CordovaInstance({ sync: true })\r\n  remove(): void {}\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class Polygon extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super();\r\n    this._map = _map;\r\n    this._objectInstance = _objectInstance;\r\n  }\r\n\r\n  /**\r\n   * Return the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any { return this._map; }\r\n\r\n  /**\r\n   * Change the polygon points.\r\n   * @param points {ILatLng[]}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setPoints(points: ILatLng[]): void {}\r\n\r\n  /**\r\n   * Return an instance of the BaseArrayClass.\r\n   * You can modify the points.\r\n   * @return {BaseArrayClass<ILatLng>}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getPoints(): BaseArrayClass<ILatLng> { return; }\r\n\r\n  /**\r\n   * Change the polygon holes.\r\n   * @param holes {ILatLng[][]}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setHoles(holes: ILatLng[][]): void {}\r\n\r\n  /**\r\n   * Return an instance of the BaseArrayClass.\r\n   * You can modify the holes.\r\n   * @return {BaseArrayClass<ILatLng[]>}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getHoles(): BaseArrayClass<ILatLng[]> { return; }\r\n\r\n  /**\r\n   * Change the filling color (inner color)\r\n   * @param fillColor {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setFillColor(fillColor: string): void {}\r\n\r\n  /**\r\n   * Return the current polygon filling color (inner color).\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getFillColor(): string { return; }\r\n\r\n  /**\r\n   * Change the stroke color (outer color)\r\n   * @param strokeColor {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStrokeColor(strokeColor: string): void {}\r\n\r\n  /**\r\n   * Return the current polygon stroke color (outer color)\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStrokeColor(): string { return; }\r\n\r\n  /**\r\n   * Change clickablity of the polygon\r\n   * @param clickable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setClickable(clickable: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the polygon is clickable\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getClickable(): boolean { return; }\r\n\r\n  /**\r\n   * Change visibility of the polygon\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the polygon is visible\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisible(): boolean { return; }\r\n\r\n  /**\r\n   * Change the polygon zIndex order.\r\n   * @param zIndex {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZIndex(zIndex: number): void {}\r\n\r\n  /**\r\n   * Return the current polygon zIndex\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZIndex(): number { return; }\r\n\r\n  /**\r\n   * Remove the polygon.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  remove(): void {}\r\n\r\n  /**\r\n   * Change the polygon stroke width\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStrokeWidth(strokeWidth: number): void {}\r\n\r\n  /**\r\n   * Return the polygon stroke width\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStrokeWidth(): number { return; }\r\n\r\n  /**\r\n   * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of the Earth.\r\n   * @param geodesic {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setGeodesic(geodesic: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the polylgon is geodesic.\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getGeodesic(): boolean { return; }\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class Polyline extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super();\r\n    this._map = _map;\r\n    this._objectInstance = _objectInstance;\r\n  }\r\n\r\n  /**\r\n   * Return the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any { return this._map; }\r\n\r\n  /**\r\n   * Change the polyline points.\r\n   * @param points {ILatLng[]}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setPoints(points: ILatLng[]): void {}\r\n\r\n  /**\r\n   * Return an instance of the BaseArrayClass\r\n   * You can modify the points.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getPoints(): BaseArrayClass<ILatLng> { return; }\r\n\r\n  /**\r\n   * When true, edges of the polyline are interpreted as geodesic and will follow the curvature of the Earth.\r\n   * @param geoDesic {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setGeoDesic(geoDesic: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the polyline is geodesic\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getGeodesic(): boolean { return; }\r\n\r\n  /**\r\n   * Change visibility of the polyline\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the polyline is visible\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisible(): boolean { return; }\r\n\r\n  /**\r\n   * Change clickablity of the polyline\r\n   * @param clickable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setClickable(clickable: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the polyline is clickable\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getClickable(): boolean { return; }\r\n\r\n  /**\r\n   * Change the polyline color\r\n   * @param strokeColor {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStrokeColor(strokeColor: string): void {}\r\n\r\n  /**\r\n   * Return the current polyline color\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStrokeColor(): string { return; }\r\n\r\n  /**\r\n   * Change the polyline stroke width\r\n   * @param strokeWidth {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStrokeWidth(strokeWidth: number): void {}\r\n\r\n  /**\r\n   * Return the current stroke width (unit: pixel).\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStrokeWidth(): number { return; }\r\n\r\n  /**\r\n   * Change the polyline zIndex order.\r\n   * @param index {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZIndex(index: number): void {}\r\n\r\n  /**\r\n   * Return the current polyline zIndex\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZIndex(): number { return; }\r\n\r\n  /**\r\n   * Remove the polyline\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  remove(): void {}\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class TileOverlay extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super();\r\n    this._map = _map;\r\n    this._objectInstance = _objectInstance;\r\n  }\r\n\r\n  /**\r\n   * Return the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any { return this._map; }\r\n\r\n  /**\r\n   * Set whether the tiles should fade in.\r\n   * @param fadeIn {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setFadeIn(fadeIn: boolean): void {}\r\n\r\n  /**\r\n   * Get whether the tiles should fade in\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getFadeIn(): boolean { return; }\r\n\r\n  /**\r\n   * Set the zIndex of the tile overlay\r\n   * @param zIndex {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZIndex(zIndex: number): void {}\r\n\r\n  /**\r\n   * Return the zIndex of the tile overlay\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZIndex(): number { return; }\r\n\r\n  /**\r\n   * Set the opacity of the tile overlay\r\n   * @param opacity {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setOpacity(opacity: number): void {}\r\n\r\n  /**\r\n   * Return the opacity of the tile overlay\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getOpacity(): number { return; }\r\n\r\n  /**\r\n   * Set false if you want to hide\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the tile overlay is visible\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisible(): boolean { return; }\r\n\r\n  /**\r\n   * Get tile size\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getTileSize(): any { return; }\r\n\r\n  /**\r\n   * Remove the tile overlay\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  remove(): void {}\r\n\r\n}\r\n\r\n// /**\r\n//  * @hidden\r\n//  */\r\n// export interface KmlOverlayOptions {\r\n//   url?: string;\r\n//   preserveViewport?: boolean;\r\n//   animation?: boolean;\r\n// }\r\n// /**\r\n//  * @hidden\r\n//  */\r\n// export class KmlOverlay {\r\n//\r\n//   constructor(private _objectInstance: any) { }\r\n//\r\n//   /**\r\n//    * Adds an event listener.\r\n//    *\r\n//    * @return {Observable<any>}\r\n//    */\r\n//   addEventListener(eventName: string): Observable<any> {\r\n//     return Observable.fromEvent(this._objectInstance, eventName);\r\n//   }\r\n//\r\n//   /**\r\n//    * Adds an event listener that works once.\r\n//    *\r\n//    * @return {Promise<any>}\r\n//    */\r\n//   addListenerOnce(eventName: string): Promise<any> {\r\n//     if (!this._objectInstance) {\r\n//       return Promise.reject({ error: 'plugin_not_installed' });\r\n//     }\r\n//     return new Promise<any>(\r\n//       resolve => this._objectInstance.addListenerOnce(eventName, resolve)\r\n//     );\r\n//   }\r\n//\r\n//   /**\r\n//    * Gets a value\r\n//    * @param key\r\n//    */\r\n//   @CordovaInstance({ sync: true })\r\n//   get(key: string): any { return; }\r\n//\r\n//   /**\r\n//    * Sets a value\r\n//    * @param key\r\n//    * @param value\r\n//    */\r\n//   @CordovaInstance({ sync: true })\r\n//   set(key: string, value: any): void { }\r\n//\r\n//   /**\r\n//    * Listen to a map event.\r\n//    *\r\n//    * @return {Observable<any>}\r\n//    */\r\n//   on(eventName: string): Observable<any> {\r\n//     if (!this._objectInstance) {\r\n//       return new Observable((observer) => {\r\n//         observer.error({ error: 'plugin_not_installed' });\r\n//       });\r\n//     }\r\n//\r\n//     return new Observable(\r\n//       (observer) => {\r\n//         this._objectInstance.on(eventName, observer.next.bind(observer));\r\n//         return () => this._objectInstance.off(event);\r\n//       }\r\n//     );\r\n//   }\r\n//\r\n//   /**\r\n//    * Listen to a map event only once.\r\n//    *\r\n//    * @return {Promise<any>}\r\n//    */\r\n//   one(eventName: string): Promise<any> {\r\n//     if (!this._objectInstance) {\r\n//       return Promise.reject({ error: 'plugin_not_installed' });\r\n//     }\r\n//     return new Promise<any>(\r\n//       resolve => this._objectInstance.one(eventName, resolve)\r\n//     );\r\n//   }\r\n//\r\n//   /**\r\n//    * Clears all stored values\r\n//    */\r\n//   @CordovaInstance({ sync: true })\r\n//   empty(): void { }\r\n//\r\n//   @CordovaInstance({ sync: true })\r\n//   remove(): void { }\r\n//\r\n//   @CordovaInstance({ sync: true })\r\n//   getOverlays(): Array<Polyline | Polygon | Marker> { return; }\r\n// }\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}