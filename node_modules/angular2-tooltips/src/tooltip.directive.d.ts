import { ComponentRef, ElementRef, OnInit, OnDestroy, OnChanges, ViewContainerRef, ComponentFactoryResolver, SimpleChanges } from "@angular/core";
import { TooltipComponent } from "./tooltip.component";
/**
 * Displays a tooltip over the element that contains this directive when
 * the active input is true.
 * @example:
 * <p>
 *    Only one word in this sentence will have a
 *    <span tooltip="hello" [active]="true">tooltip</span>.
 * </p>
 */
export declare class TooltipDirective implements OnInit, OnChanges, OnDestroy {
    private _resolver;
    private _container;
    private _el;
    private _document;
    private _tooltipRef;
    parentSelector: string;
    active: boolean;
    tooltip: string;
    tooltipClass: string;
    constructor(_resolver: ComponentFactoryResolver, _container: ViewContainerRef, _el: ElementRef, _document: any);
    /**
     * Add the tooltip component on init.
     */
    ngOnInit(): void;
    /**
     * Destroy the tooltip component on destroy.
     */
    ngOnDestroy(): void;
    /**
     * Listens for active state changes and shows / hides the tooltip
     * based on the value.
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Show the tooltip on hover, if it is not being manually shown / hidden
     * by the active attribute.
     */
    onMouseOver(ev: MouseEvent): void;
    /**
     * Hide the tooltip on leave, if it is not being manually shown / hidden
     * by the active attribute.
     */
    onMouseLeave(ev: MouseEvent): void;
    /**
     * Waits until a value has a constant value and resolves the promise.
     * Current usage is to make sure an element is finished rendering and is in
     * place before performing an action.
     * @param valFunc - a function that returns the value to wait for
     * @param threshold - the number of consecutive times the value must be
     *    consistent before being deemed final.
     * @param timeout - maximum amount of time (ms) to continue checking for a
     *    consistent value
     */
    private waitForFinalValue(valFunc, options?);
    /**
     * Dynamically adds a tooltip component
     */
    addTooltip(): Promise<ComponentRef<TooltipComponent>>;
    /**
     * Adds the tooltip (if it doesn't already exist) and then activates
     * the component.
     */
    showTooltip(): Promise<ElementRef>;
    /**
     * Deactivates the tooltip component if it exists.
     */
    hideTooltip(): void;
}
