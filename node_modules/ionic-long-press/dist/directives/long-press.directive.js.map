{"version":3,"sources":["../../src/directives/long-press.directive.ts"],"names":[],"mappings":";;AAAA,sCAA8G;AAC9G,0DAAyD;AAGzD;IAaI,4BACW,IAAY,EACnB,EAAc;QADP,SAAI,GAAJ,IAAI,CAAQ;QAVtB,iBAAY,GAAsB,IAAI,mBAAY,EAAE,CAAC;QACrD,eAAU,GAAsB,IAAI,mBAAY,EAAE,CAAC;QACnD,eAAU,GAAsB,IAAI,mBAAY,EAAE,CAAC;QAWhD,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC;IAC/B,CAAC;IAED,qCAAQ,GAAR;QAAA,iBAsBC;QArBG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;YAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;QACxC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,4JAA4J,CAAC,CAAC;QAClL,CAAC;QACD,IAAI,CAAC,YAAY,GAAG,IAAI,iBAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACzC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;QAC3B,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,CAAM;YACjC,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACV,KAAI,CAAC,GAAG,GAAG,WAAW,CAAC;oBACnB,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;gBAC3B,CAAC,EAAE,KAAI,CAAC,QAAQ,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,CAAM;YACnC,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACV,aAAa,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;YACH,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wCAAW,GAAX;QAAA,iBAMC;QALG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;YACV,aAAa,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;IAChC,CAAC;IAiBL,yBAAC;AAAD,CAnEA,AAmEC;AAhBM,6BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,kBAAkB;aAC/B,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,iCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,aAAM,GAAG;IAChB,EAAC,IAAI,EAAE,iBAAU,GAAG;CACnB,EAH6F,CAG7F,CAAC;AACK,iCAAc,GAA2C;IAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;IAC9B,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,aAAM,EAAE,EAAE;IACnC,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,aAAM,EAAE,EAAE;IACjC,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,aAAM,EAAE,EAAE;CAChC,CAAC;AAlEW,gDAAkB","file":"long-press.directive.js","sourceRoot":"","sourcesContent":["import { Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output, NgZone } from '@angular/core';\nimport { Gesture } from 'ionic-angular/gestures/gesture';\n\n\nexport class LongPressDirective implements OnInit, OnDestroy {\n\n     interval: number;\n\n     onPressStart: EventEmitter<any> = new EventEmitter();\n     onPressing: EventEmitter<any> = new EventEmitter();\n     onPressEnd: EventEmitter<any> = new EventEmitter();\n\n    el: HTMLElement;\n    pressGesture: Gesture;\n\n    int: any;\n\n    constructor(\n        public zone: NgZone,\n        el: ElementRef\n    ) {\n        this.el = el.nativeElement;\n    }\n\n    ngOnInit() {\n        if (!this.interval) this.interval = 500;\n        if (this.interval < 40) {\n            throw new Error('A limit of 40ms is imposed so you don\\'t destroy device performance. If you need less than a 40ms interval, please file an issue explaining your use case.');\n        }\n        this.pressGesture = new Gesture(this.el);\n        this.pressGesture.listen();\n        this.pressGesture.on('press', (e: any) => {\n            this.onPressStart.emit(e);\n            this.zone.run(() => {\n                this.int = setInterval(() => {\n                    this.onPressing.emit();\n                }, this.interval);\n            });\n        });\n\n        this.pressGesture.on('pressup', (e: any) => {\n            this.zone.run(() => {\n                clearInterval(this.int);\n            });\n            this.onPressEnd.emit();\n        });\n    }\n\n    ngOnDestroy() {\n        this.zone.run(() => {\n            clearInterval(this.int);\n        });\n        this.onPressEnd.emit();\n        this.pressGesture.destroy();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[ion-long-press]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'interval': [{ type: Input },],\n'onPressStart': [{ type: Output },],\n'onPressing': [{ type: Output },],\n'onPressEnd': [{ type: Output },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}