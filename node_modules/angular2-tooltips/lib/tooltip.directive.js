"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require("@angular/core");
var tooltip_component_1 = require("./tooltip.component");
var platform_browser_1 = require("@angular/platform-browser");
var TooltipDirective = (function () {
    function TooltipDirective(_resolver, _container, _el, _document) {
        this._resolver = _resolver;
        this._container = _container;
        this._el = _el;
        this._document = _document;
        this.parentSelector = "body";
    }
    TooltipDirective.prototype.ngOnInit = function () { this.addTooltip(); };
    TooltipDirective.prototype.ngOnDestroy = function () { if (this._tooltipRef) {
        this._tooltipRef.destroy();
    } };
    TooltipDirective.prototype.ngOnChanges = function (changes) {
        if (changes["active"] && typeof this.active !== "undefined") {
            if (changes["active"]["currentValue"]) {
                this.showTooltip();
            }
            else {
                this.hideTooltip();
            }
        }
    };
    TooltipDirective.prototype.onMouseOver = function (ev) {
        if (typeof this.active == "undefined") {
            this.showTooltip();
        }
    };
    TooltipDirective.prototype.onMouseLeave = function (ev) {
        if (typeof this.active == "undefined") {
            this.hideTooltip();
        }
    };
    TooltipDirective.prototype.waitForFinalValue = function (valFunc, options) {
        if (options === void 0) { options = {}; }
        var ops = Object.assign({
            threshold: 5,
            intervalTime: 100,
            timeout: 5000
        }, options);
        return new Promise(function (resolve, reject) {
            var value = valFunc();
            var totalTime = 0;
            var checks = 0;
            var interval = setInterval(function () {
                if (checks > ops.threshold) {
                    clearInterval(interval);
                    resolve(value);
                }
                else if (totalTime > ops.timeout) {
                    clearInterval(interval);
                    reject("Timed out when waiting for a final value.");
                }
                totalTime += ops.intervalTime;
                if (value == valFunc()) {
                    checks++;
                }
                else {
                    value = valFunc();
                    checks = 0;
                }
            }, ops.intervalTime);
        });
    };
    TooltipDirective.prototype.addTooltip = function () {
        var _this = this;
        if (this._tooltipRef) {
            return Promise.resolve(this._tooltipRef);
        }
        return this.waitForFinalValue(function () { return _this._el.nativeElement.offsetTop; })
            .then(function () {
            var tooltipFactory = _this._resolver.resolveComponentFactory(tooltip_component_1.TooltipComponent);
            _this._tooltipRef = _this._container.createComponent(tooltipFactory);
            _this._document.querySelector(_this.parentSelector)
                .appendChild(_this._tooltipRef.location.nativeElement);
            return _this._tooltipRef;
        });
    };
    TooltipDirective.prototype.showTooltip = function () {
        var _this = this;
        return this.addTooltip().then(function (ref) {
            return ref.instance.renderTooltip(_this._el, {
                content: _this.content,
                active: true,
                tooltipClass: _this.tooltipClass
            });
        });
    };
    TooltipDirective.prototype.hideTooltip = function () {
        if (this._tooltipRef) {
            this._tooltipRef.instance.renderTooltip(this._el, {
                content: this.content,
                active: false,
                tooltipClass: this.tooltipClass
            });
        }
    };
    return TooltipDirective;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TooltipDirective.prototype, "parentSelector", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], TooltipDirective.prototype, "active", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TooltipDirective.prototype, "content", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TooltipDirective.prototype, "tooltipClass", void 0);
TooltipDirective = __decorate([
    core_1.Directive({
        selector: '[tooltip]',
        host: {
            '(mouseover)': 'onMouseOver($event)',
            '(mouseleave)': 'onMouseLeave($event)'
        }
    }),
    __param(3, core_1.Inject(platform_browser_1.DOCUMENT)),
    __metadata("design:paramtypes", [core_1.ComponentFactoryResolver,
        core_1.ViewContainerRef,
        core_1.ElementRef, Object])
], TooltipDirective);
exports.TooltipDirective = TooltipDirective;
//# sourceMappingURL=tooltip.directive.js.map