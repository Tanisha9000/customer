var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ElementRef, trigger, state, style, transition, animate } from "@angular/core";
/**
 * This component is dynamically injected to a page via the tooltip directive
 */
var TooltipComponent = (function () {
    function TooltipComponent(elRef) {
        this.elRef = elRef;
        this.active = false;
    }
    /**
     * Set the content and position of the tooltip, then set the active status.
     */
    TooltipComponent.prototype.renderTooltip = function (el, options) {
        this._relativeElement = el;
        this.tooltipClass = options.tooltipClass;
        if (options.content) {
            this._setTooltipContent(options.content);
            this._setTooltipPosition();
        }
        if (options.active) {
            this.active = true;
        }
        else {
            this.active = false;
        }
        return this.elRef;
    };
    /**
     * Calculates the position of the tooltip element, along with an
     * offset value of how much to adjust the tooltip arrow if necessary.
     */
    TooltipComponent.prototype._calculateTooltipPosition = function () {
        // get DOM elements
        var tooltipEl = this.elRef.nativeElement.querySelector(".tooltip");
        var relEl = this._relativeElement.nativeElement;
        // width and height of tooltip element
        var tooltipDimensions = [tooltipEl.offsetWidth, tooltipEl.offsetHeight];
        // top, center position of relative element
        var relDimensions = [
            relEl.offsetLeft + relEl.offsetWidth / 2, relEl.offsetTop
        ];
        var targetX = (relDimensions[0] - tooltipDimensions[0] / 2);
        // calculate the adjusted x position to keep the element on screen
        var adjustedX = Math.min(window.innerWidth - tooltipEl.offsetWidth, Math.max(4, targetX));
        // keep the pointer offset from extending past the edge of the tooltip
        var adjustedOffset = Math.max(Math.min((tooltipEl.offsetWidth / 2) - 10, targetX - adjustedX), -(tooltipEl.offsetWidth / 2) + 10);
        return {
            left: adjustedX,
            top: relDimensions[1] - tooltipDimensions[1],
            offset: adjustedOffset
        };
    };
    /**
     * Sets the content for the tooltip.
     */
    TooltipComponent.prototype._setTooltipContent = function (content) {
        var tooltipContentEl = this.elRef.nativeElement.querySelector(".tooltip-content");
        tooltipContentEl.innerHTML = content;
    };
    /**
     * Sets the transform on the tooltip arrow.
     */
    TooltipComponent.prototype._setPointerOffset = function (offset) {
        var tooltipArrow = this.elRef.nativeElement.querySelector(".tooltip-arrow");
        var translate = "translateX(" + offset + "px)";
        tooltipArrow.style.webkitTransform = translate;
        tooltipArrow.style.MozTransform = translate;
        tooltipArrow.style.msTransform = translate;
        tooltipArrow.style.OTransform = translate;
        tooltipArrow.style.transform = translate;
    };
    /**
     * Positions the tooltip directly above the relative element.
     */
    TooltipComponent.prototype._setTooltipPosition = function () {
        // get DOM elements
        var tooltipEl = this.elRef.nativeElement.querySelector(".tooltip");
        var positions = this._calculateTooltipPosition();
        // place the tooltip
        tooltipEl.style.left = positions.left + "px";
        tooltipEl.style.top = positions.top + "px";
        if (positions.offset !== 0) {
            this._setPointerOffset(positions.offset);
        }
    };
    return TooltipComponent;
}());
TooltipComponent = __decorate([
    Component({
        template: "<div\n      class=\"tooltip\"\n      [@tooltipState]=\"active?'active':'inactive'\"\n      [ngClass]=\"tooltipClass\"\n    >\n      <span class=\"tooltip-content\"></span>\n      <span class=\"tooltip-arrow\"></span>\n    </div>\n  ",
        styles: ["\n    .tooltip {\n      position:absolute;\n      background: rgba(0,0,0,0.8);\n      color: #fff;\n      font-size:1.2rem;\n      line-height: 1.2;\n      padding:8px 12px;\n      border-radius: 3px;\n    }\n    .tooltip-content {\n      min-width:100px;\n    }\n    .tooltip-arrow {\n      position:absolute;\n      bottom: -10px;\n      border: 5px solid transparent;\n      border-top-color: rgba(0,0,0,0.8);\n      left:50%;\n      margin-left:-5px;\n    }\n\n  "],
        animations: [
            trigger("tooltipState", [
                state("active", style({
                    opacity: 1,
                    transform: "translate(0, -4px)"
                })),
                state("inactive", style({
                    opacity: 0,
                    transform: "translate(0, 0)"
                })),
                transition(":enter", [
                    style({ opacity: 0, transform: "translate(0,0)" }),
                    animate(300)
                ]),
                transition(":leave", [
                    style({ opacity: 0, transform: "translate(0,0)" }),
                    animate(300)
                ]),
                transition("inactive => active", animate(300)),
                transition("active => inactive", animate(300))
            ])
        ]
    }),
    __metadata("design:paramtypes", [ElementRef])
], TooltipComponent);
export { TooltipComponent };
//# sourceMappingURL=tooltip.component.js.map