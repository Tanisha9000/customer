{"version":3,"sources":["../../../src/@ionic-native/plugins/calendar/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\nexport interface CalendarOptions {\r\n\r\n  /**\r\n   * Id\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   *\r\n   */\r\n  firstReminderMinutes?: number;\r\n\r\n  /**\r\n   *\r\n   */\r\n  secondReminderMinutes?: number;\r\n\r\n  /**\r\n   * Recurrence. Can be set to `daily`, `weekly`, `monthly` or `yearly`\r\n   */\r\n  recurrence?: string;\r\n\r\n  /**\r\n   * Recurrence interval. Valid only when `recurrence` option is set.\r\n   */\r\n  recurrenceInterval?: number;\r\n\r\n  /**\r\n   * Recurrence end date. Valid only when `recurrence` option is set.\r\n   */\r\n  recurrenceEndDate?: Date;\r\n\r\n  /**\r\n   * Calendar name. Ths is supported by `iOS` only.\r\n   */\r\n  calendarName?: string;\r\n\r\n  /**\r\n   * Calendar id\r\n   */\r\n  calendarId?: number;\r\n\r\n  /**\r\n   * URL\r\n   */\r\n  url?: string;\r\n\r\n}\r\n\r\n/**\r\n * @name Calendar\r\n * @description\r\n * This plugin allows you to add events to the Calendar of the mobile device.\r\n *\r\n * Requires Cordova plugin: `cordova-plugin-calendar`. For more info, please see the [Calendar plugin docs](https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin).\r\n *\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Calendar } from '@ionic-native/calendar';\r\n *\r\n * constructor(private calendar: Calendar) { }\r\n *\r\n *\r\n * this.calendar.createCalendar('MyCalendar').then(\r\n *   (msg) => { console.log(msg); },\r\n *   (err) => { console.log(err); }\r\n * );\r\n * ```\r\n * @interfaces\r\n * CalendarOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'Calendar',\r\n  plugin: 'cordova-plugin-calendar',\r\n  pluginRef: 'plugins.calendar',\r\n  repo: 'https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class Calendar extends IonicNativePlugin {\r\n\r\n  /**\r\n   * This function checks if we have permission to read/write from/to the calendar.\r\n   * The promise will resolve with `true` when:\r\n   * - You're running on iOS, or\r\n   * - You're targetting API level lower than 23, or\r\n   * - You're using Android < 6, or\r\n   * - You've already granted permission\r\n   *\r\n   * If this returns false, you should call the `requestReadWritePermission` function\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  @Cordova()\r\n  hasReadWritePermission(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Check if we have read permission\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  @Cordova()\r\n  hasReadPermission(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Check if we have write permission\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  @Cordova()\r\n  hasWritePermission(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Request write permission\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  requestWritePermission(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Request read permission\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  requestReadPermission(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Requests read/write permissions\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  requestReadWritePermission(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Create a calendar. (iOS only)\r\n   *\r\n   * @param {string | Object} nameOrOptions  either a string name or a options object. If string, provide the calendar name. IF an object, provide a calendar name as a string and a calendar color in hex format as a string\r\n   * @returns {Promise<any>} Returns a Promise\r\n   */\r\n  @Cordova()\r\n  createCalendar(nameOrOptions: string | any): Promise<any> { return; }\r\n\r\n  /**\r\n   * Delete a calendar. (iOS only)\r\n   * @param {string} name  Name of the calendar to delete.\r\n   * @returns {Promise<any>} Returns a Promise\r\n   */\r\n  @Cordova()\r\n  deleteCalendar(name: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Returns the default calendar options.\r\n   *\r\n   * @return {CalendarOptions} Returns an object with the default calendar options\r\n   */\r\n  @Cordova({\r\n    sync: true\r\n  })\r\n  getCalendarOptions(): CalendarOptions { return; }\r\n\r\n  /**\r\n   * Silently create an event.\r\n   * @param {string} [title]  The event title\r\n   * @param {string} [location]  The event location\r\n   * @param {string} [notes]  The event notes\r\n   * @param {Date} [startDate]  The event start date\r\n   * @param {Date} [endDate]  The event end date\r\n   * @returns {Promise<any>} Returns a Promise\r\n   */\r\n  @Cordova()\r\n  createEvent(\r\n    title?: string,\r\n    location?: string,\r\n    notes?: string,\r\n    startDate?: Date,\r\n    endDate?: Date\r\n    ): Promise<any> { return; }\r\n\r\n  /**\r\n   * Silently create an event with additional options.\r\n   *\r\n   * @param {string} [title]  The event title\r\n   * @param {string} [location]  The event location\r\n   * @param {string} [notes]  The event notes\r\n   * @param {Date} [startDate]  The event start date\r\n   * @param {Date} [endDate]  The event end date\r\n   * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\r\n   * @returns {Promise<any>} Returns a Promise\r\n   */\r\n  @Cordova()\r\n  createEventWithOptions(\r\n    title?: string,\r\n    location?: string,\r\n    notes?: string,\r\n    startDate?: Date,\r\n    endDate?: Date,\r\n    options?: CalendarOptions\r\n    ): Promise<any> { return; }\r\n\r\n  /**\r\n   * Interactively create an event.\r\n   *\r\n   * @param {string} [title]  The event title\r\n   * @param {string} [location]  The event location\r\n   * @param {string} [notes]  The event notes\r\n   * @param {Date} [startDate]  The event start date\r\n   * @param {Date} [endDate]  The event end date\r\n   * @returns {Promise<any>} Returns a Promise\r\n   */\r\n  @Cordova()\r\n  createEventInteractively(\r\n    title?: string,\r\n    location?: string,\r\n    notes?: string,\r\n    startDate?: Date,\r\n    endDate?: Date\r\n    ): Promise<any> { return; }\r\n\r\n  /**\r\n   * Interactively create an event with additional options.\r\n   *\r\n   * @param {string} [title]  The event title\r\n   * @param {string} [location]  The event location\r\n   * @param {string} [notes]  The event notes\r\n   * @param {Date} [startDate]  The event start date\r\n   * @param {Date} [endDate]  The event end date\r\n   * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  createEventInteractivelyWithOptions(\r\n    title?: string,\r\n    location?: string,\r\n    notes?: string,\r\n    startDate?: Date,\r\n    endDate?: Date,\r\n    options?: CalendarOptions\r\n    ): Promise<any> { return; }\r\n\r\n  /**\r\n   * Find an event.\r\n   *\r\n   * @param {string} [title]  The event title\r\n   * @param {string} [location]  The event location\r\n   * @param {string} [notes]  The event notes\r\n   * @param {Date} [startDate]  The event start date\r\n   * @param {Date} [endDate]  The event end date\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  findEvent(\r\n    title?: string,\r\n    location?: string,\r\n    notes?: string,\r\n    startDate?: Date,\r\n    endDate?: Date\r\n    ): Promise<any> { return; }\r\n\r\n  /**\r\n   * Find an event with additional options.\r\n   * @param {string} [title]  The event title\r\n   * @param {string} [location]  The event location\r\n   * @param {string} [notes]  The event notes\r\n   * @param {Date} [startDate]  The event start date\r\n   * @param {Date} [endDate]  The event end date\r\n   * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\r\n   * @returns {Promise<any>} Returns a Promise that resolves with the event, or rejects with an error.\r\n   */\r\n  @Cordova()\r\n  findEventWithOptions(\r\n    title?: string,\r\n    location?: string,\r\n    notes?: string,\r\n    startDate?: Date,\r\n    endDate?: Date,\r\n    options?: CalendarOptions\r\n    ): Promise<any> { return; }\r\n\r\n  /**\r\n   * Find a list of events within the specified date range. (Android only)\r\n   *\r\n   * @param {Date} [startDate]  The start date\r\n   * @param {Date} [endDate]  The end date\r\n   * @returns {Promise<any>} Returns a Promise that resolves with the list of events, or rejects with an error.\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  listEventsInRange(startDate: Date, endDate: Date): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get a list of all calendars.\r\n   * @returns {Promise<any>} A Promise that resolves with the list of calendars, or rejects with an error.\r\n   */\r\n  @Cordova()\r\n  listCalendars(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get a list of all future events in the specified calendar. (iOS only)\r\n   * @returns {Promise<any>} Returns a Promise that resolves with the list of events, or rejects with an error.\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  findAllEventsInNamedCalendar(calendarName: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Modify an event. (iOS only)\r\n   *\r\n   * @param {string} [title]  The event title\r\n   * @param {string} [location]  The event location\r\n   * @param {string} [notes]  The event notes\r\n   * @param {Date} [startDate]  The event start date\r\n   * @param {Date} [endDate]  The event end date\r\n   * @param {string} [newTitle]  The new event title\r\n   * @param {string} [newLocation]  The new event location\r\n   * @param {string} [newNotes]  The new event notes\r\n   * @param {Date} [newStartDate]  The new event start date\r\n   * @param {Date} [newEndDate]  The new event end date\r\n   * @return Returns a Promise\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  modifyEvent(\r\n    title?: string,\r\n    location?: string,\r\n    notes?: string,\r\n    startDate?: Date,\r\n    endDate?: Date,\r\n    newTitle?: string,\r\n    newLocation?: string,\r\n    newNotes?: string,\r\n    newStartDate?: Date,\r\n    newEndDate?: Date\r\n    ): Promise<any> { return; }\r\n\r\n  /**\r\n   * Modify an event with additional options. (iOS only)\r\n   *\r\n   * @param {string} [title]  The event title\r\n   * @param {string} [location]  The event location\r\n   * @param {string} [notes]  The event notes\r\n   * @param {Date} [startDate]  The event start date\r\n   * @param {Date} [endDate]  The event end date\r\n   * @param {string} [newTitle]  The new event title\r\n   * @param {string} [newLocation]  The new event location\r\n   * @param {string} [newNotes]  The new event notes\r\n   * @param {Date} [newStartDate]  The new event start date\r\n   * @param {Date} [newEndDate]  The new event end date\r\n   * @param {CalendarOptions} [filterOptions] Event Options, see `getCalendarOptions`\r\n   * @param {CalendarOptions} [newOptions]  New event options, see `getCalendarOptions`\r\n   * @return Returns a Promise\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  modifyEventWithOptions(\r\n    title?: string,\r\n    location?: string,\r\n    notes?: string,\r\n    startDate?: Date,\r\n    endDate?: Date,\r\n    newTitle?: string,\r\n    newLocation?: string,\r\n    newNotes?: string,\r\n    newStartDate?: Date,\r\n    newEndDate?: Date,\r\n    filterOptions?: CalendarOptions,\r\n    newOptions?: CalendarOptions\r\n    ): Promise<any> { return; }\r\n\r\n  /**\r\n   * Delete an event.\r\n   *\r\n   * @param {string} [title]  The event title\r\n   * @param {string} [location]  The event location\r\n   * @param {string} [notes]  The event notes\r\n   * @param {Date} [startDate]  The event start date\r\n   * @param {Date} [endDate]  The event end date\r\n   * @return Returns a Promise\r\n   */\r\n  @Cordova()\r\n  deleteEvent(\r\n    title?: string,\r\n    location?: string,\r\n    notes?: string,\r\n    startDate?: Date,\r\n    endDate?: Date\r\n    ): Promise<any> { return; }\r\n\r\n  /**\r\n   * Delete an event from the specified Calendar. (iOS only)\r\n   *\r\n   * @param {string} [title]  The event title\r\n   * @param {string} [location]  The event location\r\n   * @param {string} [notes]  The event notes\r\n   * @param {Date} [startDate]  The event start date\r\n   * @param {Date} [endDate]  The event end date\r\n   * @param {string} calendarName\r\n   * @return Returns a Promise\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  deleteEventFromNamedCalendar(\r\n    title?: string,\r\n    location?: string,\r\n    notes?: string,\r\n    startDate?: Date,\r\n    endDate?: Date,\r\n    calendarName?: string\r\n    ): Promise<any> { return; }\r\n\r\n  /**\r\n   * Open the calendar at the specified date.\r\n   * @param {Date} date The date you want to open the calendar on\r\n   * @return {Promise<any>} Promise returns a promise\r\n   */\r\n  @Cordova()\r\n  openCalendar(date: Date): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}